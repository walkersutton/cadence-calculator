from flask import Flask, jsonify, render_template, request
from flask_sqlalchemy import SQLAlchemy
import os
import requests

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/tokens.db'
db = SQLAlchemy(app)

CLIENT_ID = os.environ.get('CADENCE_CALCULATOR_CLIENT_ID')
CLIENT_SECRET = os.environ.get('CADENCE_CALCULATOR_CLIENT_SECRET')

class Access(db.Model):
    __tablename__ = 'access_token'
    athlete_id = db.Column(db.Integer, primary_key=True)
    scope = db.Column(db.Boolean)
    access_token = db.Column(db.String(64), unique=True, index=True)
    expires_at = db.Column(db.Integer, index=True) 

    def __repr__(self):
        return '<User %r>' % self.username

class Refresh(db.Model):
    __tablename__ = 'refresh_token'
    athlete_id = db.Column(db.Integer, ForeignKey('access_token.athlete_id'))
    refresh_token = db.Column(db.String(64), unique=True, index=True)
    scope = db.Column(db.Boolean)

    def __repr__(self):
        return '<User %r>' % self.username


def token_exchange(code):
    endpoint = 'https://www.strava.com/oauth/token'
    data = {
        'client_id': CLIENT_ID,
        'client_secret': CLIENT_SECRET,
        'code': code,
        'grant_type': 'authorization_code'
    }
    response = requests.post(url=endpoint, data=data)
    print('--------------------------------------------------')
    print(response)
    print(response.text)
    print('--------------------------------------------------')

@app.route('/getmsg/', methods=['GET'])
def respond():
    # Retrieve the name from url parameter
    name = request.args.get("name", None)

    # For debugging
    print(f"got name {name}")

    response = {}

    # Check if user sent a name at all
    if not name:
        response["ERROR"] = "no name found, please send a name."
    # Check if the user entered a number not a name
    elif str(name).isdigit():
        response["ERROR"] = "name can't be numeric."
    # Now the user entered a valid name
    else:
        response["MESSAGE"] = f"Welcome {name} to our awesome platform!!"

    # Return the response in json format
    return jsonify(response)

# @app.route('/post/', methods=['POST'])
# def post_something():
#     param = request.form.get('name')
#     print(param)
#     # You can add the test cases you made in the previous function, but in our case here you are just testing the POST functionality
#     if param:
#         return jsonify({
#             "Message": f"Welcome {name} to our awesome platform!!",
#             # Add this option to distinct the POST request
#             "METHOD" : "POST"
#         })
#     else:
#         return jsonify({
#             "ERROR": "no name found, please send a name."
#         })

# A welcome message to test our server
@app.route('/')
def index():
    return render_template('index.html')

# 
@app.route('/auth')
def auth():
    # TODO change to include activity:write eventually
    required_scope = {'read', 'read_all'}
    code = request.args.get('code')
    error = request.args.get('error')
    scope = request.args.get('scope')
    given_scope = set(scope.split(',')) if scope else {}
    if error:
        status = 'error'
    elif given_scope == required_scope:
        status  = 'success'
    else:
        status = 'insufficient authorization'

    token_exchange(code)    
    return render_template('auth.html', status=status)    


    

if __name__ == '__main__':
    # Threaded option to enable multiple instances for multiple user access support
    app.run(threaded=True, port=5000)
